generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Athlete {
  id                String         @id @default(uuid())
  userId            String         @unique
  gender            String
  sport             String
  maxHearteRate     Int
  thresholdWattrate Int
  thresholdSpeed    Int
  competitions      Competition[]
  goals             Goal[]
  session           Session[]
  archivedMeta      ArchivedMeta[]
}

model Competition {
  id         String       @id @default(uuid())
  title      String
  date       DateTime
  location   String
  goal       Goal[]
  type       String
  priority   String
  comment    String
  Athlete    Athlete?     @relation(fields: [athleteId], references: [id])
  athleteId  String?
  Interval   Interval?    @relation(fields: [intervalId], references: [id])
  intervalId String?
  Connection Connection[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
}

model Question {
  id        String   @id @default(uuid())
  question  String
  type      String
  anwser    String?
  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?
  Report    Report?  @relation(fields: [reportId], references: [id])
  reportId  String?
}

model Goal {
  id            String       @id @default(uuid())
  title         String
  date          DateTime
  goal          Int
  comment       String
  competition   Competition? @relation(fields: [competitionId], references: [id])
  competitionId String?
  Connection    Connection[]
  Athlete       Athlete?     @relation(fields: [athleteId], references: [id])
  athleteId     String?
}

model Session {
  id         String      @id @default(uuid())
  date       DateTime
  title      String
  tags       Tag[]
  type       String
  questions  Question[]
  intervals  Interval[]
  report     Report?
  connection Connection?

  Athlete   Athlete? @relation(fields: [athleteId], references: [id])
  athleteId String?
}

model Interval {
  id           String        @id @default(uuid())
  session      Session       @relation(fields: [sessionId], references: [id])
  sessionId    String
  duration     Int
  intensity    Int
  competitions Competition[]
}

model Report {
  id             String           @id @default(uuid())
  status         String
  intervalReport IntervalReport[]
  questionReport Question[]
  comments       String
  session        Session          @relation(fields: [sessionId], references: [id])
  sessionId      String           @unique
}

model IntervalReport {
  id                    Int    @id @default(autoincrement())
  report                Report @relation(fields: [reportId], references: [id])
  reportId              String
  intervalNumber        Int
  perceivedIntensityMin Int
  perceivedIntensityMax Int
  perceivedIntensityAvg Int
  pulseMin              Int
  pulseMax              Int
  pulseAvg              Int
  speedMin              Float
  speedMax              Float
  speedAvg              Float
  wattMin               Int
  wattMax               Int
  wattAvg               Int
  time                  Int
}

model Connection {
  id            Int          @id @default(autoincrement())
  session       Session      @relation(fields: [sessionId], references: [id])
  sessionId     String       @unique
  goal          Goal?        @relation(fields: [goalId], references: [id])
  Competition   Competition? @relation(fields: [competitionId], references: [id])
  goalId        String?
  competitionId String?
}

model ArchivedMeta {
  id           Int      @id @default(autoincrement())
  athleteId    String   @unique
  heartrate    Int
  watt         Int
  speed        Int
  archivedDate DateTime @default(now())

  Athlete Athlete @relation(fields: [athleteId], references: [id])
}
