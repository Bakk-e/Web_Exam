generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Athlete {
  id           String         @id @default(uuid())
  userId       String         @unique
  gender       String
  sport        String
  meta         Meta?
  activities   Activity[]
  competitions Competition[]
  goals        Goal[]
  templates    Template[]
  ArchivedMeta ArchivedMeta[]
}

model Meta {
  id        Int     @id @default(autoincrement())
  heartrate Int?
  watt      Int?
  speed     Int?
  athlete   Athlete @relation(fields: [athleteId], references: [id])
  athleteId String  @unique
}

model Competition {
  id         String       @id @default(uuid())
  title      String?
  location   String?
  date       DateTime?
  type       String?
  comment    String?
  athleteId  String
  Athlete    Athlete      @relation(fields: [athleteId], references: [id])
  goals      Goal[]
  intervals  Interval[]
  Connection Connection[]
}

model Questions {
  id   String  @id @default(uuid())
  text String?
  type String?

  Template   Template? @relation(fields: [templateId], references: [id])
  templateId String?
}

model Question {
  id         String    @id @default(uuid())
  text       String?
  type       String?
  answer     String?
  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?
}

model Goal {
  id            String       @id @default(uuid())
  title         String?
  date          DateTime?
  goal          Int?
  comment       String?
  competition   Competition? @relation(fields: [competitionId], references: [id])
  competitionId String?
  Connection    Connection[]
  Athlete       Athlete?     @relation(fields: [athleteId], references: [id])
  athleteId     String?
  Activity      Activity[]
}

model Activity {
  id         String      @id @default(uuid())
  date       DateTime?
  title      String?
  type       String?
  tags       String?
  questions  Question[]
  intervals  Interval[]
  goal       Goal?       @relation(fields: [goalId], references: [id])
  goalId     String?
  report     Report?
  connection Connection?

  Athlete   Athlete? @relation(fields: [athleteId], references: [id])
  athleteId String?
}

model Interval {
  id            String       @id @default(uuid())
  duration      Int?
  intensityZone Int?
  Competition   Competition? @relation(fields: [competitionId], references: [id])
  competitionId String?
  Template      Template?    @relation(fields: [templateId], references: [id])
  templateId    String?
  activity      Activity?    @relation(fields: [activityId], references: [id])
  activityId    String?
}

model Report {
  id              String           @id @default(uuid())
  status          String?
  reportIntervals ReportInterval[]
  comments        String?
  activities      Activity?        @relation(fields: [activityId], references: [id])
  activityId      String?          @unique
}

model ReportInterval {
  id                  Int    @id @default(autoincrement())
  report              Report @relation(fields: [reportId], references: [id])
  reportId            String
  intervalNumber      Int?
  averageIntesitySone Int?
  minHeartRate        Int?
  maxHeartRate        Int?
  averageHeartRate    Int?
  minSpeed            Float?
  maxSpeed            Float?
  averageSpeed        Float?
  minWattage          Int?
  maxWattage          Int?
  averageWattage      Int?
  duration            Int?
}

model Connection {
  id            Int          @id @default(autoincrement())
  activities    Activity?    @relation(fields: [activityId], references: [id])
  activityId    String?      @unique
  goal          Goal?        @relation(fields: [goalId], references: [id])
  competition   Competition? @relation(fields: [competitionId], references: [id])
  goalId        String?
  competitionId String?
}

model Template {
  id         String      @id @default(uuid())
  title      String?
  tags       String?
  type       String?
  questions  Questions[]
  intervals  Interval[]
  parameters String?
  Athlete    Athlete?    @relation(fields: [athleteId], references: [id])
  athleteId  String?
}

model ArchivedMeta {
  id           Int       @id @default(autoincrement())
  athleteId    String?   @unique
  heartrate    Int?
  watt         Int?
  speed        Int?
  archivedDate DateTime? @default(now())
  Athlete      Athlete?  @relation(fields: [athleteId], references: [id])
}
